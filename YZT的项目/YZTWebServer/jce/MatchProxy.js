// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 4.2.2 by TAF Team.
// Generated from `./Match.jce'
// **********************************************************************

var TafStream = require('@taf/taf-stream');
var TafError  = require('@taf/taf-rpc').error;

if(TafStream.JceStruct == undefined){
TafStream.JceStruct = function() {
this._jce_double_precision_ = -1;
}
TafStream.JceStruct.prototype.setPrecision = function(d) {
if ((d == -1) || (d >= 0 && d <= 15)) {
this._jce_double_precision_ = d;
return true;
}
return false;
}
TafStream.JceStruct.prototype.resetPrecision = function() { this._jce_double_precision_ = -1;}
TafStream.JceStruct.prototype.hasSetPrecision = function() { return (this._jce_double_precision_ >= 0 && this._jce_double_precision_ <= 15);}
TafStream.JceStruct.prototype.getPrecision = function() { return this._jce_double_precision_; }
}

var Quant = Quant || {};
module.exports.Quant = Quant;

Quant.MatchProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

Quant.MatchProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

Quant.MatchProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


Quant.TOP_N_NUM = 10;

Quant.E_MATCH_RET_TYPE = {
    E_MATCH_OK : 0,
    E_MATCH_INVALID_PARAM : -1,
    E_MATCH_NOT_READY : -2,
    E_MATCH_NO_DATA : -3,
    E_MATCH_NO_KLINE : -4,
    E_MATCH_INPUT_SUSPEND : -5,
    E_MATCH_NOT_ENOUGH_KLINE : -6,
    E_MATCH_SERVER_FAIL : -99
};
Quant.E_MATCH_RET_TYPE._write = function(os, tag, val) { return os.writeInt32(tag, val); }
Quant.E_MATCH_RET_TYPE._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
Quant.MatchFactor = {
    MATCH_FACTOR_RISE_RATE : 1,
    MATCH_FACTOR_AMOUNT : 2,
    MATCH_FACTOR_AVG_PRICE : 4,
    MATCH_FACTOR_ALL : 255
};
Quant.MatchFactor._write = function(os, tag, val) { return os.writeInt32(tag, val); }
Quant.MatchFactor._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
Quant.PREDICT_RET_TYPE = {
    RT_PREDICT_ONLY : 1,
    RT_KLINE_ONLY : 2,
    RT_SAMPLE_ONLY : 4,
    RT_ALL : 255
};
Quant.PREDICT_RET_TYPE._write = function(os, tag, val) { return os.writeInt32(tag, val); }
Quant.PREDICT_RET_TYPE._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
Quant.E_LIST_CATEGORY = {
    E_LIST_MARKET_INDEX : 1,
    E_LIST_HOT_STOCK : 2,
    E_LIST_HOT_INDEX : 3,
    E_LIST_TOP_TEN : 4,
    E_LIST_LAST_TEN : 5
};
Quant.E_LIST_CATEGORY._write = function(os, tag, val) { return os.writeInt32(tag, val); }
Quant.E_LIST_CATEGORY._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
Quant.E_LIST_PLATE = {
    E_PLATE_HS_AG : 1,
    E_PLATE_SH_AG : 2,
    E_PLATE_SZ_AG : 3,
    E_PLATE_ZXB : 4,
    E_PLATE_CYB : 5
};
Quant.E_LIST_PLATE._write = function(os, tag, val) { return os.writeInt32(tag, val); }
Quant.E_LIST_PLATE._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }
Quant.E_LIST_SORT = {
    E_SORT_PROFIT : 1,
    E_SORT_UPPROB : 2,
    E_SORT_RATIO : 3
};
Quant.E_LIST_SORT._write = function(os, tag, val) { return os.writeInt32(tag, val); }
Quant.E_LIST_SORT._read  = function(is, tag, def) { return is.readInt32(tag, true, def); }

Quant.ChartData = function() {
    this.high = 0;
    this.low = 0;
    this.open = 0;
    this.close = 0;
    this.ceil = 0;
    this.flor = 0;
    this.profit = 0;
    this.upProb = 0;
    this.ratio = 0;
    this.date = 0;
    this.volume = 0;
    this._classname = "Quant.ChartData";
};
Quant.ChartData.prototype = new TafStream.JceStruct();
Quant.ChartData._classname = "Quant.ChartData";

Quant.ChartData._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.ChartData._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.ChartData._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.ChartData();
    tmp.high = is.readInt32(0, false, 0);
    tmp.low = is.readInt32(1, false, 0);
    tmp.open = is.readInt32(2, false, 0);
    tmp.close = is.readInt32(3, false, 0);
    tmp.ceil = is.readInt32(4, false, 0);
    tmp.flor = is.readInt32(5, false, 0);
    tmp.profit = is.readInt32(6, false, 0);
    tmp.upProb = is.readInt32(7, false, 0);
    tmp.ratio = is.readInt32(8, false, 0);
    tmp.date = is.readInt32(9, true, 0);
    tmp.volume = is.readInt64(10, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.ChartData.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.high != undefined && this.high != 0) {
        os.writeInt32(0, this.high);
    }
    if (this.low != undefined && this.low != 0) {
        os.writeInt32(1, this.low);
    }
    if (this.open != undefined && this.open != 0) {
        os.writeInt32(2, this.open);
    }
    if (this.close != undefined && this.close != 0) {
        os.writeInt32(3, this.close);
    }
    if (this.ceil != undefined && this.ceil != 0) {
        os.writeInt32(4, this.ceil);
    }
    if (this.flor != undefined && this.flor != 0) {
        os.writeInt32(5, this.flor);
    }
    if (this.profit != undefined && this.profit != 0) {
        os.writeInt32(6, this.profit);
    }
    if (this.upProb != undefined && this.upProb != 0) {
        os.writeInt32(7, this.upProb);
    }
    if (this.ratio != undefined && this.ratio != 0) {
        os.writeInt32(8, this.ratio);
    }
    os.writeInt32(9, this.date);
    if (this.volume != undefined && this.volume != 0) {
        os.writeInt64(10, this.volume);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.ChartData.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.ChartData.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.ChartData.prototype.toObject = function() { 
    var tmp = {};

    tmp.high = this.high;
    tmp.low = this.low;
    tmp.open = this.open;
    tmp.close = this.close;
    tmp.ceil = this.ceil;
    tmp.flor = this.flor;
    tmp.profit = this.profit;
    tmp.upProb = this.upProb;
    tmp.ratio = this.ratio;
    tmp.date = this.date;
    tmp.volume = this.volume;
    
    return tmp;
}
Quant.ChartData.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("high") || (this.high = json.high);
    !json.hasOwnProperty("low") || (this.low = json.low);
    !json.hasOwnProperty("open") || (this.open = json.open);
    !json.hasOwnProperty("close") || (this.close = json.close);
    !json.hasOwnProperty("ceil") || (this.ceil = json.ceil);
    !json.hasOwnProperty("flor") || (this.flor = json.flor);
    !json.hasOwnProperty("profit") || (this.profit = json.profit);
    !json.hasOwnProperty("upProb") || (this.upProb = json.upProb);
    !json.hasOwnProperty("ratio") || (this.ratio = json.ratio);
    !json.hasOwnProperty("date") || (this.date = json.date);
    !json.hasOwnProperty("volume") || (this.volume = json.volume);
}
Quant.ChartData.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.ChartData.new = function () {
    return new Quant.ChartData();
}
Quant.ChartData.create = function (is) {
    return Quant.ChartData._readFrom(is);
}
Quant.Kline = function() {
    this.code = "";
    this.market = 0;
    this.semBlance = 0;
    this.profit = 0;
    this.iStartTime = 0;
    this.iEndTime = 0;
    this.chartDataList = new TafStream.List(Quant.ChartData);
    this.name = "";
    this.value = 0;
    this.industry = "";
    this._classname = "Quant.Kline";
};
Quant.Kline.prototype = new TafStream.JceStruct();
Quant.Kline._classname = "Quant.Kline";

Quant.Kline._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.Kline._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.Kline._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.Kline();
    tmp.code = is.readString(0, false, "");
    tmp.market = is.readInt32(1, false, 0);
    tmp.semBlance = is.readInt32(2, false, 0);
    tmp.profit = is.readInt32(3, false, 0);
    tmp.iStartTime = is.readInt32(4, false, 0);
    tmp.iEndTime = is.readInt32(5, false, 0);
    tmp.chartDataList = is.readList(6, false, TafStream.List(Quant.ChartData));
    tmp.name = is.readString(7, false, "");
    tmp.value = is.readDouble(8, false, 0);
    tmp.industry = is.readString(9, false, "");
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.Kline.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.code != undefined && this.code != "") {
        os.writeString(0, this.code);
    }
    if (this.market != undefined && this.market != 0) {
        os.writeInt32(1, this.market);
    }
    if (this.semBlance != undefined && this.semBlance != 0) {
        os.writeInt32(2, this.semBlance);
    }
    if (this.profit != undefined && this.profit != 0) {
        os.writeInt32(3, this.profit);
    }
    if (this.iStartTime != undefined && this.iStartTime != 0) {
        os.writeInt32(4, this.iStartTime);
    }
    if (this.iEndTime != undefined && this.iEndTime != 0) {
        os.writeInt32(5, this.iEndTime);
    }
    if (this.chartDataList != undefined && this.chartDataList.length > 0) {
        os.writeList(6, this.chartDataList);
    }
    if (this.name != undefined && this.name != "") {
        os.writeString(7, this.name);
    }
    if (this.value != undefined && this.value != 0) {
        os.writeDouble(8, this.value);
    }
    if (this.industry != undefined && this.industry != "") {
        os.writeString(9, this.industry);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.Kline.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.Kline.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.Kline.prototype.toObject = function() { 
    var tmp = {};

    tmp.code = this.code;
    tmp.market = this.market;
    tmp.semBlance = this.semBlance;
    tmp.profit = this.profit;
    tmp.iStartTime = this.iStartTime;
    tmp.iEndTime = this.iEndTime;
    tmp.chartDataList = this.chartDataList.toObject();
    tmp.name = this.name;
    tmp.value = this.value;
    tmp.industry = this.industry;
    
    return tmp;
}
Quant.Kline.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("code") || (this.code = json.code);
    !json.hasOwnProperty("market") || (this.market = json.market);
    !json.hasOwnProperty("semBlance") || (this.semBlance = json.semBlance);
    !json.hasOwnProperty("profit") || (this.profit = json.profit);
    !json.hasOwnProperty("iStartTime") || (this.iStartTime = json.iStartTime);
    !json.hasOwnProperty("iEndTime") || (this.iEndTime = json.iEndTime);
    !json.hasOwnProperty("chartDataList") || (this.chartDataList.readFromObject(json.chartDataList));
    !json.hasOwnProperty("name") || (this.name = json.name);
    !json.hasOwnProperty("value") || (this.value = json.value);
    !json.hasOwnProperty("industry") || (this.industry = json.industry);
}
Quant.Kline.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.Kline.new = function () {
    return new Quant.Kline();
}
Quant.Kline.create = function (is) {
    return Quant.Kline._readFrom(is);
}
Quant.SimilarKlineSample = function() {
    this.sampleNum = 0;
    this.positiveSample = 0;
    this.negativeSample = 0;
    this.upProb = 0;
    this.avgProfit = 0;
    this.middleProfit = 0;
    this.positiveAvgProfit = 0;
    this.positiveMiddleProfit = 0;
    this.negativeAvgProfit = 0;
    this.negativeMiddleProfit = 0;
    this.ratio = 0;
    this.ceil = 0;
    this.flor = 0;
    this.cycle = 0;
    this.klineList = new TafStream.List(Quant.Kline);
    this.mostProbPrifit = 0;
    this._classname = "Quant.SimilarKlineSample";
};
Quant.SimilarKlineSample.prototype = new TafStream.JceStruct();
Quant.SimilarKlineSample._classname = "Quant.SimilarKlineSample";

Quant.SimilarKlineSample._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.SimilarKlineSample._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.SimilarKlineSample._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.SimilarKlineSample();
    tmp.sampleNum = is.readInt32(0, false, 0);
    tmp.positiveSample = is.readInt32(1, false, 0);
    tmp.negativeSample = is.readInt32(2, false, 0);
    tmp.upProb = is.readInt32(3, false, 0);
    tmp.avgProfit = is.readInt32(4, false, 0);
    tmp.middleProfit = is.readInt32(5, false, 0);
    tmp.positiveAvgProfit = is.readInt32(6, false, 0);
    tmp.positiveMiddleProfit = is.readInt32(7, false, 0);
    tmp.negativeAvgProfit = is.readInt32(8, false, 0);
    tmp.negativeMiddleProfit = is.readInt32(9, false, 0);
    tmp.ratio = is.readInt32(10, false, 0);
    tmp.ceil = is.readInt32(11, false, 0);
    tmp.flor = is.readInt32(12, false, 0);
    tmp.cycle = is.readInt32(13, false, 0);
    tmp.klineList = is.readList(14, false, TafStream.List(Quant.Kline));
    tmp.mostProbPrifit = is.readInt32(15, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.SimilarKlineSample.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.sampleNum != undefined && this.sampleNum != 0) {
        os.writeInt32(0, this.sampleNum);
    }
    if (this.positiveSample != undefined && this.positiveSample != 0) {
        os.writeInt32(1, this.positiveSample);
    }
    if (this.negativeSample != undefined && this.negativeSample != 0) {
        os.writeInt32(2, this.negativeSample);
    }
    if (this.upProb != undefined && this.upProb != 0) {
        os.writeInt32(3, this.upProb);
    }
    if (this.avgProfit != undefined && this.avgProfit != 0) {
        os.writeInt32(4, this.avgProfit);
    }
    if (this.middleProfit != undefined && this.middleProfit != 0) {
        os.writeInt32(5, this.middleProfit);
    }
    if (this.positiveAvgProfit != undefined && this.positiveAvgProfit != 0) {
        os.writeInt32(6, this.positiveAvgProfit);
    }
    if (this.positiveMiddleProfit != undefined && this.positiveMiddleProfit != 0) {
        os.writeInt32(7, this.positiveMiddleProfit);
    }
    if (this.negativeAvgProfit != undefined && this.negativeAvgProfit != 0) {
        os.writeInt32(8, this.negativeAvgProfit);
    }
    if (this.negativeMiddleProfit != undefined && this.negativeMiddleProfit != 0) {
        os.writeInt32(9, this.negativeMiddleProfit);
    }
    if (this.ratio != undefined && this.ratio != 0) {
        os.writeInt32(10, this.ratio);
    }
    if (this.ceil != undefined && this.ceil != 0) {
        os.writeInt32(11, this.ceil);
    }
    if (this.flor != undefined && this.flor != 0) {
        os.writeInt32(12, this.flor);
    }
    if (this.cycle != undefined && this.cycle != 0) {
        os.writeInt32(13, this.cycle);
    }
    if (this.klineList != undefined && this.klineList.length > 0) {
        os.writeList(14, this.klineList);
    }
    if (this.mostProbPrifit != undefined && this.mostProbPrifit != 0) {
        os.writeInt32(15, this.mostProbPrifit);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.SimilarKlineSample.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.SimilarKlineSample.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.SimilarKlineSample.prototype.toObject = function() { 
    var tmp = {};

    tmp.sampleNum = this.sampleNum;
    tmp.positiveSample = this.positiveSample;
    tmp.negativeSample = this.negativeSample;
    tmp.upProb = this.upProb;
    tmp.avgProfit = this.avgProfit;
    tmp.middleProfit = this.middleProfit;
    tmp.positiveAvgProfit = this.positiveAvgProfit;
    tmp.positiveMiddleProfit = this.positiveMiddleProfit;
    tmp.negativeAvgProfit = this.negativeAvgProfit;
    tmp.negativeMiddleProfit = this.negativeMiddleProfit;
    tmp.ratio = this.ratio;
    tmp.ceil = this.ceil;
    tmp.flor = this.flor;
    tmp.cycle = this.cycle;
    tmp.klineList = this.klineList.toObject();
    tmp.mostProbPrifit = this.mostProbPrifit;
    
    return tmp;
}
Quant.SimilarKlineSample.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sampleNum") || (this.sampleNum = json.sampleNum);
    !json.hasOwnProperty("positiveSample") || (this.positiveSample = json.positiveSample);
    !json.hasOwnProperty("negativeSample") || (this.negativeSample = json.negativeSample);
    !json.hasOwnProperty("upProb") || (this.upProb = json.upProb);
    !json.hasOwnProperty("avgProfit") || (this.avgProfit = json.avgProfit);
    !json.hasOwnProperty("middleProfit") || (this.middleProfit = json.middleProfit);
    !json.hasOwnProperty("positiveAvgProfit") || (this.positiveAvgProfit = json.positiveAvgProfit);
    !json.hasOwnProperty("positiveMiddleProfit") || (this.positiveMiddleProfit = json.positiveMiddleProfit);
    !json.hasOwnProperty("negativeAvgProfit") || (this.negativeAvgProfit = json.negativeAvgProfit);
    !json.hasOwnProperty("negativeMiddleProfit") || (this.negativeMiddleProfit = json.negativeMiddleProfit);
    !json.hasOwnProperty("ratio") || (this.ratio = json.ratio);
    !json.hasOwnProperty("ceil") || (this.ceil = json.ceil);
    !json.hasOwnProperty("flor") || (this.flor = json.flor);
    !json.hasOwnProperty("cycle") || (this.cycle = json.cycle);
    !json.hasOwnProperty("klineList") || (this.klineList.readFromObject(json.klineList));
    !json.hasOwnProperty("mostProbPrifit") || (this.mostProbPrifit = json.mostProbPrifit);
}
Quant.SimilarKlineSample.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.SimilarKlineSample.new = function () {
    return new Quant.SimilarKlineSample();
}
Quant.SimilarKlineSample.create = function (is) {
    return Quant.SimilarKlineSample._readFrom(is);
}
Quant.SinglePredictReq = function() {
    this.market = 0;
    this.code = "";
    this.matchFactor = 0;
    this.semBlance = 0;
    this.matchCycle = 0;
    this.matchIndustry = "";
    this.matchStartDate = 0;
    this.matchEndDate = 0;
    this.queryStartDate = 19901201;
    this.queryEndDate = 0;
    this.eRetType = 0;
    this.bMatchSuspendInput = true;
    this.uiMaxSampleSize = 100;
    this.uiMinSampleToPredict = 3;
    this._classname = "Quant.SinglePredictReq";
};
Quant.SinglePredictReq.prototype = new TafStream.JceStruct();
Quant.SinglePredictReq._classname = "Quant.SinglePredictReq";

Quant.SinglePredictReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.SinglePredictReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.SinglePredictReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.SinglePredictReq();
    tmp.market = is.readInt32(1, false, 0);
    tmp.code = is.readString(2, true, "");
    tmp.matchFactor = is.readInt32(3, true, 0);
    tmp.semBlance = is.readInt32(4, false, 0);
    tmp.matchCycle = is.readInt32(5, false, 0);
    tmp.matchIndustry = is.readString(6, false, "");
    tmp.matchStartDate = is.readInt32(7, false, 0);
    tmp.matchEndDate = is.readInt32(8, false, 0);
    tmp.queryStartDate = is.readInt32(9, false, 19901201);
    tmp.queryEndDate = is.readInt32(10, false, 0);
    tmp.eRetType = is.readInt32(11, false, 0);
    tmp.bMatchSuspendInput = is.readBoolean(12, false, true);
    tmp.uiMaxSampleSize = is.readUInt32(13, false, 100);
    tmp.uiMinSampleToPredict = is.readUInt32(14, false, 3);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.SinglePredictReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.market != undefined && this.market != 0) {
        os.writeInt32(1, this.market);
    }
    os.writeString(2, this.code);
    os.writeInt32(3, this.matchFactor);
    if (this.semBlance != undefined && this.semBlance != 0) {
        os.writeInt32(4, this.semBlance);
    }
    if (this.matchCycle != undefined && this.matchCycle != 0) {
        os.writeInt32(5, this.matchCycle);
    }
    if (this.matchIndustry != undefined && this.matchIndustry != "") {
        os.writeString(6, this.matchIndustry);
    }
    if (this.matchStartDate != undefined && this.matchStartDate != 0) {
        os.writeInt32(7, this.matchStartDate);
    }
    if (this.matchEndDate != undefined && this.matchEndDate != 0) {
        os.writeInt32(8, this.matchEndDate);
    }
    if (this.queryStartDate != undefined && this.queryStartDate != 19901201) {
        os.writeInt32(9, this.queryStartDate);
    }
    if (this.queryEndDate != undefined && this.queryEndDate != 0) {
        os.writeInt32(10, this.queryEndDate);
    }
    if (this.eRetType != undefined && this.eRetType != 0) {
        os.writeInt32(11, this.eRetType);
    }
    if (this.bMatchSuspendInput != undefined && this.bMatchSuspendInput != true) {
        os.writeBoolean(12, this.bMatchSuspendInput);
    }
    if (this.uiMaxSampleSize != undefined && this.uiMaxSampleSize != 100) {
        os.writeUInt32(13, this.uiMaxSampleSize);
    }
    if (this.uiMinSampleToPredict != undefined && this.uiMinSampleToPredict != 3) {
        os.writeUInt32(14, this.uiMinSampleToPredict);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.SinglePredictReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.SinglePredictReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.SinglePredictReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.market = this.market;
    tmp.code = this.code;
    tmp.matchFactor = this.matchFactor;
    tmp.semBlance = this.semBlance;
    tmp.matchCycle = this.matchCycle;
    tmp.matchIndustry = this.matchIndustry;
    tmp.matchStartDate = this.matchStartDate;
    tmp.matchEndDate = this.matchEndDate;
    tmp.queryStartDate = this.queryStartDate;
    tmp.queryEndDate = this.queryEndDate;
    tmp.eRetType = this.eRetType;
    tmp.bMatchSuspendInput = this.bMatchSuspendInput;
    tmp.uiMaxSampleSize = this.uiMaxSampleSize;
    tmp.uiMinSampleToPredict = this.uiMinSampleToPredict;
    
    return tmp;
}
Quant.SinglePredictReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("market") || (this.market = json.market);
    !json.hasOwnProperty("code") || (this.code = json.code);
    !json.hasOwnProperty("matchFactor") || (this.matchFactor = json.matchFactor);
    !json.hasOwnProperty("semBlance") || (this.semBlance = json.semBlance);
    !json.hasOwnProperty("matchCycle") || (this.matchCycle = json.matchCycle);
    !json.hasOwnProperty("matchIndustry") || (this.matchIndustry = json.matchIndustry);
    !json.hasOwnProperty("matchStartDate") || (this.matchStartDate = json.matchStartDate);
    !json.hasOwnProperty("matchEndDate") || (this.matchEndDate = json.matchEndDate);
    !json.hasOwnProperty("queryStartDate") || (this.queryStartDate = json.queryStartDate);
    !json.hasOwnProperty("queryEndDate") || (this.queryEndDate = json.queryEndDate);
    !json.hasOwnProperty("eRetType") || (this.eRetType = json.eRetType);
    !json.hasOwnProperty("bMatchSuspendInput") || (this.bMatchSuspendInput = json.bMatchSuspendInput);
    !json.hasOwnProperty("uiMaxSampleSize") || (this.uiMaxSampleSize = json.uiMaxSampleSize);
    !json.hasOwnProperty("uiMinSampleToPredict") || (this.uiMinSampleToPredict = json.uiMinSampleToPredict);
}
Quant.SinglePredictReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.SinglePredictReq.new = function () {
    return new Quant.SinglePredictReq();
}
Quant.SinglePredictReq.create = function (is) {
    return Quant.SinglePredictReq._readFrom(is);
}
Quant.Predict = function() {
    this.code = "";
    this.name = "";
    this.market = 0;
    this.chartDataList = new TafStream.List(Quant.ChartData);
    this.klineList = new TafStream.List(Quant.ChartData);
    this.sample = new Quant.SimilarKlineSample();
    this.useFactor = 0;
    this._classname = "Quant.Predict";
};
Quant.Predict.prototype = new TafStream.JceStruct();
Quant.Predict._classname = "Quant.Predict";

Quant.Predict._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.Predict._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.Predict._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.Predict();
    tmp.code = is.readString(0, true, "");
    tmp.name = is.readString(1, false, "");
    tmp.market = is.readInt32(2, false, 0);
    tmp.chartDataList = is.readList(3, false, TafStream.List(Quant.ChartData));
    tmp.klineList = is.readList(4, false, TafStream.List(Quant.ChartData));
    tmp.sample = is.readStruct(5, false, Quant.SimilarKlineSample);
    tmp.useFactor = is.readInt32(6, false, 0);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.Predict.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeString(0, this.code);
    if (this.name != undefined && this.name != "") {
        os.writeString(1, this.name);
    }
    if (this.market != undefined && this.market != 0) {
        os.writeInt32(2, this.market);
    }
    if (this.chartDataList != undefined && this.chartDataList.length > 0) {
        os.writeList(3, this.chartDataList);
    }
    if (this.klineList != undefined && this.klineList.length > 0) {
        os.writeList(4, this.klineList);
    }
    os.writeStruct(5, this.sample);
    if (this.useFactor != undefined && this.useFactor != 0) {
        os.writeInt32(6, this.useFactor);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.Predict.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.Predict.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.Predict.prototype.toObject = function() { 
    var tmp = {};

    tmp.code = this.code;
    tmp.name = this.name;
    tmp.market = this.market;
    tmp.chartDataList = this.chartDataList.toObject();
    tmp.klineList = this.klineList.toObject();
    tmp.sample = this.sample.toObject();
    tmp.useFactor = this.useFactor;
    
    return tmp;
}
Quant.Predict.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("code") || (this.code = json.code);
    !json.hasOwnProperty("name") || (this.name = json.name);
    !json.hasOwnProperty("market") || (this.market = json.market);
    !json.hasOwnProperty("chartDataList") || (this.chartDataList.readFromObject(json.chartDataList));
    !json.hasOwnProperty("klineList") || (this.klineList.readFromObject(json.klineList));
    !json.hasOwnProperty("sample") || (this.sample.readFromObject(json.sample));
    !json.hasOwnProperty("useFactor") || (this.useFactor = json.useFactor);
}
Quant.Predict.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.Predict.new = function () {
    return new Quant.Predict();
}
Quant.Predict.create = function (is) {
    return Quant.Predict._readFrom(is);
}
Quant.PredictListReq = function() {
    this.cycle = 0;
    this.category = 0;
    this.plate = 1;
    this.sort = 1;
    this._classname = "Quant.PredictListReq";
};
Quant.PredictListReq.prototype = new TafStream.JceStruct();
Quant.PredictListReq._classname = "Quant.PredictListReq";

Quant.PredictListReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.PredictListReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.PredictListReq._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.PredictListReq();
    tmp.cycle = is.readInt32(0, true, 0);
    tmp.category = is.readInt32(1, true, 0);
    tmp.plate = is.readInt32(2, false, 1);
    tmp.sort = is.readInt32(3, false, 1);
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.PredictListReq.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeInt32(0, this.cycle);
    os.writeInt32(1, this.category);
    if (this.plate != undefined && this.plate != 1) {
        os.writeInt32(2, this.plate);
    }
    if (this.sort != undefined && this.sort != 1) {
        os.writeInt32(3, this.sort);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.PredictListReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.PredictListReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.PredictListReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.cycle = this.cycle;
    tmp.category = this.category;
    tmp.plate = this.plate;
    tmp.sort = this.sort;
    
    return tmp;
}
Quant.PredictListReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("cycle") || (this.cycle = json.cycle);
    !json.hasOwnProperty("category") || (this.category = json.category);
    !json.hasOwnProperty("plate") || (this.plate = json.plate);
    !json.hasOwnProperty("sort") || (this.sort = json.sort);
}
Quant.PredictListReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.PredictListReq.new = function () {
    return new Quant.PredictListReq();
}
Quant.PredictListReq.create = function (is) {
    return Quant.PredictListReq._readFrom(is);
}
Quant.PredictListRsp = function() {
    this.predictList = new TafStream.List(Quant.Predict);
    this._classname = "Quant.PredictListRsp";
};
Quant.PredictListRsp.prototype = new TafStream.JceStruct();
Quant.PredictListRsp._classname = "Quant.PredictListRsp";

Quant.PredictListRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.PredictListRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.PredictListRsp._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.PredictListRsp();
    tmp.predictList = is.readList(0, true, TafStream.List(Quant.Predict));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.PredictListRsp.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    os.writeList(0, this.predictList);
    os.resumePrecision && os.resumePrecision();
};
Quant.PredictListRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.PredictListRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.PredictListRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.predictList = this.predictList.toObject();
    
    return tmp;
}
Quant.PredictListRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("predictList") || (this.predictList.readFromObject(json.predictList));
}
Quant.PredictListRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.PredictListRsp.new = function () {
    return new Quant.PredictListRsp();
}
Quant.PredictListRsp.create = function (is) {
    return Quant.PredictListRsp._readFrom(is);
}
Quant.ForecastKlineSample = function() {
    this.sampleNum = 0;
    this.positiveSample = 0;
    this.negativeSample = 0;
    this.upProb = 0;
    this.avgProfit = 0;
    this.middleProfit = 0;
    this.positiveAvgProfit = 0;
    this.positiveMiddleProfit = 0;
    this.negativeAvgProfit = 0;
    this.negativeMiddleProfit = 0;
    this.ratio = 0;
    this.ceil = 0;
    this.flor = 0;
    this.matchDay = 0;
    this.klineList = new TafStream.List(Quant.Kline);
    this._classname = "Quant.ForecastKlineSample";
};
Quant.ForecastKlineSample.prototype = new TafStream.JceStruct();
Quant.ForecastKlineSample._classname = "Quant.ForecastKlineSample";

Quant.ForecastKlineSample._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.ForecastKlineSample._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.ForecastKlineSample._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.ForecastKlineSample();
    tmp.sampleNum = is.readInt32(0, false, 0);
    tmp.positiveSample = is.readInt32(1, false, 0);
    tmp.negativeSample = is.readInt32(2, false, 0);
    tmp.upProb = is.readInt32(3, false, 0);
    tmp.avgProfit = is.readInt32(4, false, 0);
    tmp.middleProfit = is.readInt32(5, false, 0);
    tmp.positiveAvgProfit = is.readInt32(6, false, 0);
    tmp.positiveMiddleProfit = is.readInt32(7, false, 0);
    tmp.negativeAvgProfit = is.readInt32(8, false, 0);
    tmp.negativeMiddleProfit = is.readInt32(9, false, 0);
    tmp.ratio = is.readInt32(10, false, 0);
    tmp.ceil = is.readInt32(11, false, 0);
    tmp.flor = is.readInt32(12, false, 0);
    tmp.matchDay = is.readInt32(13, false, 0);
    tmp.klineList = is.readList(14, false, TafStream.List(Quant.Kline));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.ForecastKlineSample.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.sampleNum != undefined && this.sampleNum != 0) {
        os.writeInt32(0, this.sampleNum);
    }
    if (this.positiveSample != undefined && this.positiveSample != 0) {
        os.writeInt32(1, this.positiveSample);
    }
    if (this.negativeSample != undefined && this.negativeSample != 0) {
        os.writeInt32(2, this.negativeSample);
    }
    if (this.upProb != undefined && this.upProb != 0) {
        os.writeInt32(3, this.upProb);
    }
    if (this.avgProfit != undefined && this.avgProfit != 0) {
        os.writeInt32(4, this.avgProfit);
    }
    if (this.middleProfit != undefined && this.middleProfit != 0) {
        os.writeInt32(5, this.middleProfit);
    }
    if (this.positiveAvgProfit != undefined && this.positiveAvgProfit != 0) {
        os.writeInt32(6, this.positiveAvgProfit);
    }
    if (this.positiveMiddleProfit != undefined && this.positiveMiddleProfit != 0) {
        os.writeInt32(7, this.positiveMiddleProfit);
    }
    if (this.negativeAvgProfit != undefined && this.negativeAvgProfit != 0) {
        os.writeInt32(8, this.negativeAvgProfit);
    }
    if (this.negativeMiddleProfit != undefined && this.negativeMiddleProfit != 0) {
        os.writeInt32(9, this.negativeMiddleProfit);
    }
    if (this.ratio != undefined && this.ratio != 0) {
        os.writeInt32(10, this.ratio);
    }
    if (this.ceil != undefined && this.ceil != 0) {
        os.writeInt32(11, this.ceil);
    }
    if (this.flor != undefined && this.flor != 0) {
        os.writeInt32(12, this.flor);
    }
    if (this.matchDay != undefined && this.matchDay != 0) {
        os.writeInt32(13, this.matchDay);
    }
    if (this.klineList != undefined && this.klineList.length > 0) {
        os.writeList(14, this.klineList);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.ForecastKlineSample.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.ForecastKlineSample.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.ForecastKlineSample.prototype.toObject = function() { 
    var tmp = {};

    tmp.sampleNum = this.sampleNum;
    tmp.positiveSample = this.positiveSample;
    tmp.negativeSample = this.negativeSample;
    tmp.upProb = this.upProb;
    tmp.avgProfit = this.avgProfit;
    tmp.middleProfit = this.middleProfit;
    tmp.positiveAvgProfit = this.positiveAvgProfit;
    tmp.positiveMiddleProfit = this.positiveMiddleProfit;
    tmp.negativeAvgProfit = this.negativeAvgProfit;
    tmp.negativeMiddleProfit = this.negativeMiddleProfit;
    tmp.ratio = this.ratio;
    tmp.ceil = this.ceil;
    tmp.flor = this.flor;
    tmp.matchDay = this.matchDay;
    tmp.klineList = this.klineList.toObject();
    
    return tmp;
}
Quant.ForecastKlineSample.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("sampleNum") || (this.sampleNum = json.sampleNum);
    !json.hasOwnProperty("positiveSample") || (this.positiveSample = json.positiveSample);
    !json.hasOwnProperty("negativeSample") || (this.negativeSample = json.negativeSample);
    !json.hasOwnProperty("upProb") || (this.upProb = json.upProb);
    !json.hasOwnProperty("avgProfit") || (this.avgProfit = json.avgProfit);
    !json.hasOwnProperty("middleProfit") || (this.middleProfit = json.middleProfit);
    !json.hasOwnProperty("positiveAvgProfit") || (this.positiveAvgProfit = json.positiveAvgProfit);
    !json.hasOwnProperty("positiveMiddleProfit") || (this.positiveMiddleProfit = json.positiveMiddleProfit);
    !json.hasOwnProperty("negativeAvgProfit") || (this.negativeAvgProfit = json.negativeAvgProfit);
    !json.hasOwnProperty("negativeMiddleProfit") || (this.negativeMiddleProfit = json.negativeMiddleProfit);
    !json.hasOwnProperty("ratio") || (this.ratio = json.ratio);
    !json.hasOwnProperty("ceil") || (this.ceil = json.ceil);
    !json.hasOwnProperty("flor") || (this.flor = json.flor);
    !json.hasOwnProperty("matchDay") || (this.matchDay = json.matchDay);
    !json.hasOwnProperty("klineList") || (this.klineList.readFromObject(json.klineList));
}
Quant.ForecastKlineSample.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.ForecastKlineSample.new = function () {
    return new Quant.ForecastKlineSample();
}
Quant.ForecastKlineSample.create = function (is) {
    return Quant.ForecastKlineSample._readFrom(is);
}
Quant.IndustryList = function() {
    this.mIndustry = new TafStream.Map(TafStream.String, TafStream.String);
    this._classname = "Quant.IndustryList";
};
Quant.IndustryList.prototype = new TafStream.JceStruct();
Quant.IndustryList._classname = "Quant.IndustryList";

Quant.IndustryList._write = function (os, tag, value) { os.writeStruct(tag, value); }
Quant.IndustryList._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Quant.IndustryList._readFrom = function (is) {
    if(is.readResumePrecision == undefined){
        is.readResumePrecision = function(){
            return -1;
        }
    }
    is.saveResetPrecision && is.saveResetPrecision();
    var tmp = new Quant.IndustryList();
    tmp.mIndustry = is.readMap(0, false, TafStream.Map(TafStream.String, TafStream.String));
    tmp._jce_double_precision_ = is.readResumePrecision();
    return tmp;
};
Quant.IndustryList.prototype._writeTo = function (os) {
    os.savePrecision && os.savePrecision(this._jce_double_precision_);
    if (this.mIndustry != undefined && this.mIndustry.size() > 0) {
        os.writeMap(0, this.mIndustry);
    }
    os.resumePrecision && os.resumePrecision();
};
Quant.IndustryList.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
Quant.IndustryList.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Quant.IndustryList.prototype.toObject = function() { 
    var tmp = {};

    tmp.mIndustry = this.mIndustry.toObject();
    
    return tmp;
}
Quant.IndustryList.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("mIndustry") || (this.mIndustry.readFromObject(json.mIndustry));
}
Quant.IndustryList.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Quant.IndustryList.new = function () {
    return new Quant.IndustryList();
}
Quant.IndustryList.create = function (is) {
    return Quant.IndustryList._readFrom(is);
}

Quant.MatchProxy.prototype.getIndustry = function () {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(1, true, Quant.IndustryList);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getIndustry', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Quant.MatchProxy.prototype.getPredictList = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.rsp = is.readStruct(2, true, Quant.PredictListRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getPredictList', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

Quant.MatchProxy.prototype.getSinglePredict = function (req) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, req);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.predict = is.readStruct(2, true, Quant.Predict);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getSinglePredict', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



